"diameter_agent": {
       "enabled": false,                                       // enables the diameter agent: <true|false>
       "listen": "127.0.0.1:3868",                     // address where to listen for diameter requests <x.y.z.y/x1.y1.z1.y1:1234>
       "listen_net": "tcp",                            // transport type for diameter <tcp|sctp>
       "dictionaries_path": "/usr/share/cgrates/diameter/dict/",       // path towards directory
                                                                               //   holding additional dictionaries to load
       "sessions_conns": ["*internal"],        // connection towards SessionS
       "origin_host": "CGR-DA",                        // diameter Origin-Host AVP used in replies
       "origin_realm": "cgrates.org",          // diameter Origin-Realm AVP used in replies
       "vendor_id": 0,                                         // diameter Vendor-Id AVP used in replies
       "product_name": "CGRateS",                      // diameter Product-Name AVP used in replies
       "synced_conn_requests": false,          // process one request at the time per connection
       "asr_template": "*asr",                         // enable AbortSession message being sent to client
       "request_processors": [         // decision logic for message processing
               {
                       "id": "SMSes",          // id is used for debug in logs (ie: using *log flag)
                       "filters": [            // list of filters to be applied on message for this processor to run
                               "*string:~*vars.*cmd:CCR",
                               "*string:~*req.CC-Request-Type:4",
                               "*string:~*req.Service-Context-Id:LPP"
                       ],
                       "flags": ["*event", "*accounts", "*cdrs"],      // influence processing logic within CGRateS workflow
                       "request_fields":[                                                      // data exchanged between Diameter and CGRateS
                               {
                                       "tag": "ToR",                   // tag is used in debug,
                                       "path": "*cgreq.ToR",   // path is the field on CGRateS side
                                       "type": "*constant",    // type defines the method to provide the value
                                       "value": "*sms"}
                               {
                                       "tag": "OriginID",                      // OriginID will identify uniquely
                                       "path": "*cgreq.OriginID",      // the session on CGRateS side
                                       "type": "*variable",            // it's value will be taken from Diameter AVP:
                                       "mandatory": true,                      // Multiple-Services-Credit-Control.Service-Identifier
                                       "value": "~*req.Multiple-Services-Credit-Control.Service-Identifier"
                               },
                               {
                                       "tag": "OriginHost",            // OriginHost combined with OriginID
                                       "path": "*cgreq.OriginHost",// is used by CGRateS to build the CGRID
                                       "mandatory": true,
                                       "type": "*variable",            // have the value out of special variable: *vars
                                       "value": "*vars.OriginHost"
                               },
                               {
                                       "tag": "RequestType",                   // RequestType instructs SessionS
                                       "path": "*cgreq.RequestType",   //  about charging type to apply for the event
                                       "type": "*constant",
                                       "value": "*prepaid"
                               },
                               {
                                       "tag": "Category",                      // Category serves for ataching Account
                                       "path": "*cgreq.Category",      //   and RatingProfile to the request
                                       "type": "*constant",
                                       "value": "sms"
                               },
                               {
                                       "tag": "Account",                       // Account is required by charging
                                       "path": "*cgreq.Account",
                                       "type": "*variable",            // value is taken dynamically from a group AVP
                                       "mandatory": true,                      //   where Subscription-Id-Type is 0
                                       "value": "~*req.Subscription-Id.Subscription-Id-Data<~Subscription-Id-Type(0)>"
                               },
                               {
                                       "tag": "Destination",                   // Destination is used for charging
                                       "path": "*cgreq.Destination",   // value from Diameter will be mediated before sent to CGRateS
                                       "type": "*variable",
                                       "mandatory": true,
                                       "value": "~*req.Service-Information.SMS-Information.Recipient-Info.Recipient-Address.Address-Data:s/^\\+49(\\d+)/int${1}/:s/^0049(\\d+)/int${1}/:s/^49(\\d+)/int${1}/:s/^00(\\d+)/+${1}/:s/^[\\+]?(\\d+)/int${1}/:s/int(\\d+)/+49${1}/"
                               },
                               {
                                       "tag": "Destination",           // Second Destination will overwrite the first if filter matches
                                       "path": "*cgreq.Destination",
                                       "filters":[                                     // Only overwrite when filters are matching
                                               "*notprefix:~*req.Service-Information.SMS-Information.Recipient-Info.Recipient-Address.Address-Data:49",
                                               "*notprefix:~*req.Service-Information.SMS-Information.Recipient-Info.Recipient-Address.Address-Data:3312"
                                       ],
                                       "type": "*variable",
                                       "mandatory": true,
                                       "value": "~*req.Service-Information.SMS-Information.Recipient-Info.Recipient-Address.Address-Data:s/^[\\+]?(\\d+)/int${1}/:s/int(\\d+)/+00${1}/"
                               },
                               {
                                       "tag": "SetupTime",                     // SetupTime is used by charging
                                       "path": "*cgreq.SetupTime",
                                       "type": "*variable",
                                       "value": "~*req.Event-Timestamp",
                                       "mandatory": true
                               },
                               {
                                       "tag": "AnswerTime",            // AnswerTime is used by charging
                                       "path": "*cgreq.AnswerTime",
                                       "type": "*variable",
                                       "mandatory": true,
                                       "value": "~*req.Event-Timestamp"
                               },
                               {
                                       "tag": "Usage",                 // Usage is used by charging
                                       "path": "*cgreq.Usage",
                                       "type": "*variable",
                                       "mandatory": true,
                                       "value": "~*req.Multiple-Services-Credit-Control.Requested-Service-Unit.CC-Service-Specific-Units"
                               },
                               {
                                       "tag": "Originator-SCCP-Address",                       // Originator-SCCP-Address is an extra field which we want in CDR
                                       "path": "*cgreq.Originator-SCCP-Address",       // not used by CGRateS
                                       "type": "*variable", "mandatory": true,
                                       "value": "~*req.Service-Information.SMS-Information.Originator-SCCP-Address"
                               },
                       ],
                       "reply_fields":[                        // fields which are sent back to DiameterClient
                               {
                                       "tag": "CCATemplate",   // inject complete Template defined as *cca above
                                       "type": "*template",
                                       "value": "*cca"
                               },
                               {
                                       "tag": "ResultCode",    // Change the ResultCode if the reply received from CGRateS contains a 0 MaxUsage
                                       "filters": ["*eq:~*cgrep.MaxUsage:0"],
                                       "path": "*rep.Result-Code",
                                       "blocker": true,                // do not consider further fields if this one is processed
                                       "type": "*constant",
                                       "value": "4012"},
                               {"tag": "ResultCode",           // Change the ResultCode AVP if there was an error received from CGRateS
                                       "filters": ["*notempty:~*cgrep.Error:"],
                                       "path": "*rep.Result-Code",
                                       "blocker": true,
                                       "type": "*constant",
                                       "value": "5030"}
                       ]
               }

       ]
               },

       ],
},